{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zcsu035\\\\Desktop\\\\reacttest\\\\reacttest1\\\\src\\\\Notes.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { useState } from 'react';\n// export default function Notes() {\n//   const [Notes, setNotes] = useState([]);\n//   const [Title, setTitle] = useState('');\n//   const [Des,setDes]=useState('')\n//   function handledes(){\n//     return(\n//         <div>\n//             <h1>rdftyg</h1>\n//         </div>\n//     )\n\n//   }\n//   function handleDelete(){\n//         // data=Notes.filter((title!==this.target))\n//         setNotes((current)=>{\n//             current.filter(\n//                 value=>(value.title!==current.title)\n\n//             )\n\n//         })\n\n//   }\n//   function handleEdit(){\n\n//   }\n\n//   return (\n//     <div id=\"notes\">\n//         <h1>Notes Taking App</h1>\n//       <input\n//         value={Title}\n//         onChange={e => setTitle(e.target.value)}\n//       />\n//       <textarea onChange={e=>setDes(e.target.value)}>\n\n//       </textarea>\n//       <button onClick={() => {\n//         setTitle('');\n//         setNotes([{\n//           id: Notes.length,\n//           text: Title\n//         }, ...Notes]);\n//       }}>Save</button>\n//       <ul>\n//         {Notes.map(item => (\n//           <li key={item.id}   onClick={handledes}>\n//             {item.text }\n\n//             <button onClick={handleEdit}>Edit</button>\n//             <button onClick={handleDelete }>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\nimport { useReducer } from 'react';\n// import AddTask from './AddTask.js';\n// import TaskList from './TaskList.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction tasksReducer(tasks, action) {\n  switch (action.type) {\n    case 'added':\n      {\n        return [...tasks, {\n          id: action.id,\n          text: action.text,\n          done: false\n        }];\n      }\n    case 'changed':\n      {\n        return tasks.map(t => {\n          if (t.id === action.task.id) {\n            return action.task;\n          } else {\n            return t;\n          }\n        });\n      }\n    case 'deleted':\n      {\n        return tasks.filter(t => t.id !== action.id);\n      }\n    default:\n      {\n        throw Error('Unknown action: ' + action.type);\n      }\n  }\n}\nexport default function TaskApp() {\n  _s();\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\n  function handleAddTask(text) {\n    dispatch({\n      type: 'added',\n      id: nextId++,\n      text: text\n    });\n  }\n  function handleChangeTask(task) {\n    dispatch({\n      type: 'changed',\n      task: task\n    });\n  }\n  function handleDeleteTask(taskId) {\n    dispatch({\n      type: 'deleted',\n      id: taskId\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Prague itinerary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTask, {\n      onAddTask: handleAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onChangeTask: handleChangeTask,\n      onDeleteTask: handleDeleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TaskApp, \"/WXoOWA8jcmGw6IJvQ6lpVQrnbs=\");\n_c = TaskApp;\nlet nextId = 3;\nconst initialTasks = [{\n  id: 0,\n  text: 'Visit Kafka Museum',\n  done: true\n}, {\n  id: 1,\n  text: 'Watch a puppet show',\n  done: false\n}, {\n  id: 2,\n  text: 'Lennon Wall pic',\n  done: false\n}];\nvar _c;\n$RefreshReg$(_c, \"TaskApp\");","map":{"version":3,"names":["useReducer","jsxDEV","_jsxDEV","Fragment","_Fragment","tasksReducer","tasks","action","type","id","text","done","map","t","task","filter","Error","TaskApp","_s","dispatch","initialTasks","handleAddTask","nextId","handleChangeTask","handleDeleteTask","taskId","children","fileName","_jsxFileName","lineNumber","columnNumber","AddTask","onAddTask","TaskList","onChangeTask","onDeleteTask","_c","$RefreshReg$"],"sources":["C:/Users/zcsu035/Desktop/reacttest/reacttest1/src/Notes.js"],"sourcesContent":["// import React from 'react';\r\n// import { useState } from 'react';\r\n// export default function Notes() {\r\n//   const [Notes, setNotes] = useState([]);\r\n//   const [Title, setTitle] = useState('');\r\n//   const [Des,setDes]=useState('')\r\n//   function handledes(){\r\n//     return(\r\n//         <div>\r\n//             <h1>rdftyg</h1>\r\n//         </div>\r\n//     )\r\n\r\n//   }\r\n//   function handleDelete(){\r\n//         // data=Notes.filter((title!==this.target))\r\n//         setNotes((current)=>{\r\n//             current.filter(\r\n//                 value=>(value.title!==current.title)\r\n\r\n                \r\n//             )\r\n\r\n//         })\r\n\r\n\r\n//   }\r\n//   function handleEdit(){\r\n\r\n\r\n//   }\r\n\r\n//   return (\r\n//     <div id=\"notes\">\r\n//         <h1>Notes Taking App</h1>\r\n//       <input\r\n//         value={Title}\r\n//         onChange={e => setTitle(e.target.value)}\r\n//       />\r\n//       <textarea onChange={e=>setDes(e.target.value)}>\r\n\r\n\r\n//       </textarea>\r\n//       <button onClick={() => {\r\n//         setTitle('');\r\n//         setNotes([{\r\n//           id: Notes.length,\r\n//           text: Title\r\n//         }, ...Notes]);\r\n//       }}>Save</button>\r\n//       <ul>\r\n//         {Notes.map(item => (\r\n//           <li key={item.id}   onClick={handledes}>\r\n//             {item.text }\r\n            \r\n//             <button onClick={handleEdit}>Edit</button>\r\n//             <button onClick={handleDelete }>Delete</button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\nimport { useReducer } from 'react';\r\n// import AddTask from './AddTask.js';\r\n// import TaskList from './TaskList.js';\r\n\r\nfunction tasksReducer(tasks, action) {\r\n  switch (action.type) {\r\n    case 'added': {\r\n      return [...tasks, {\r\n        id: action.id,\r\n        text: action.text,\r\n        done: false\r\n      }];\r\n    }\r\n    case 'changed': {\r\n      return tasks.map(t => {\r\n        if (t.id === action.task.id) {\r\n          return action.task;\r\n        } else {\r\n          return t;\r\n        }\r\n      });\r\n    }\r\n    case 'deleted': {\r\n      return tasks.filter(t => t.id !== action.id);\r\n    }\r\n    default: {\r\n      throw Error('Unknown action: ' + action.type);\r\n    }\r\n  }\r\n}\r\n\r\nexport default function TaskApp() {\r\n  const [tasks, dispatch] = useReducer(\r\n    tasksReducer,\r\n    initialTasks\r\n  );\r\n\r\n  function handleAddTask(text) {\r\n    dispatch({\r\n      type: 'added',\r\n      id: nextId++,\r\n      text: text,\r\n    });\r\n  }\r\n\r\n  function handleChangeTask(task) {\r\n    dispatch({\r\n      type: 'changed',\r\n      task: task\r\n    });\r\n  }\r\n\r\n  function handleDeleteTask(taskId) {\r\n    dispatch({\r\n      type: 'deleted',\r\n      id: taskId\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Prague itinerary</h1>\r\n      <AddTask\r\n        onAddTask={handleAddTask}\r\n      />\r\n      <TaskList\r\n        tasks={tasks}\r\n        onChangeTask={handleChangeTask}\r\n        onDeleteTask={handleDeleteTask}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nlet nextId = 3;\r\nconst initialTasks = [\r\n  { id: 0, text: 'Visit Kafka Museum', done: true },\r\n  { id: 1, text: 'Watch a puppet show', done: false },\r\n  { id: 2, text: 'Lennon Wall pic', done: false }\r\n];\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}